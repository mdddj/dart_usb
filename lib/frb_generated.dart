// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/usb.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => 690733595;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'dart_usb',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<UsbInfo>> crateApiUsbGetUsbInfos();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<UsbInfo>> crateApiUsbGetUsbInfos() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_usb_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbGetUsbInfosConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbGetUsbInfosConstMeta => const TaskConstMeta(
        debugName: "get_usb_infos",
        argNames: [],
      );

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<UsbInfo> dco_decode_list_usb_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_usb_info).toList();
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UsbInfo dco_decode_usb_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return UsbInfo(
      busNumber: dco_decode_u_8(arr[0]),
      address: dco_decode_u_8(arr[1]),
      vendorId: dco_decode_u_16(arr[2]),
      productId: dco_decode_u_16(arr[3]),
      numConfigurations: dco_decode_u_8(arr[4]),
      maxPacketSize: dco_decode_u_8(arr[5]),
      protocolCode: dco_decode_u_8(arr[6]),
      subClassCode: dco_decode_u_8(arr[7]),
      classCode: dco_decode_u_8(arr[8]),
      serialNumberStringIndex: dco_decode_opt_box_autoadd_u_8(arr[9]),
      productStringIndex: dco_decode_opt_box_autoadd_u_8(arr[10]),
      manufacturerStringIndex: dco_decode_opt_box_autoadd_u_8(arr[11]),
      usbVersion: dco_decode_usb_version(arr[12]),
      deviceVersion: dco_decode_usb_version(arr[13]),
      descriptorType: dco_decode_u_8(arr[14]),
      length: dco_decode_u_8(arr[15]),
    );
  }

  @protected
  UsbVersion dco_decode_usb_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UsbVersion(
      field0: dco_decode_u_8(arr[0]),
      field1: dco_decode_u_8(arr[1]),
      field2: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  List<UsbInfo> sse_decode_list_usb_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UsbInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_usb_info(deserializer));
    }
    return ans_;
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UsbInfo sse_decode_usb_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_busNumber = sse_decode_u_8(deserializer);
    var var_address = sse_decode_u_8(deserializer);
    var var_vendorId = sse_decode_u_16(deserializer);
    var var_productId = sse_decode_u_16(deserializer);
    var var_numConfigurations = sse_decode_u_8(deserializer);
    var var_maxPacketSize = sse_decode_u_8(deserializer);
    var var_protocolCode = sse_decode_u_8(deserializer);
    var var_subClassCode = sse_decode_u_8(deserializer);
    var var_classCode = sse_decode_u_8(deserializer);
    var var_serialNumberStringIndex =
        sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_productStringIndex = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_manufacturerStringIndex =
        sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_usbVersion = sse_decode_usb_version(deserializer);
    var var_deviceVersion = sse_decode_usb_version(deserializer);
    var var_descriptorType = sse_decode_u_8(deserializer);
    var var_length = sse_decode_u_8(deserializer);
    return UsbInfo(
        busNumber: var_busNumber,
        address: var_address,
        vendorId: var_vendorId,
        productId: var_productId,
        numConfigurations: var_numConfigurations,
        maxPacketSize: var_maxPacketSize,
        protocolCode: var_protocolCode,
        subClassCode: var_subClassCode,
        classCode: var_classCode,
        serialNumberStringIndex: var_serialNumberStringIndex,
        productStringIndex: var_productStringIndex,
        manufacturerStringIndex: var_manufacturerStringIndex,
        usbVersion: var_usbVersion,
        deviceVersion: var_deviceVersion,
        descriptorType: var_descriptorType,
        length: var_length);
  }

  @protected
  UsbVersion sse_decode_usb_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    var var_field2 = sse_decode_u_8(deserializer);
    return UsbVersion(
        field0: var_field0, field1: var_field1, field2: var_field2);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_list_usb_info(List<UsbInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_usb_info(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usb_info(UsbInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.busNumber, serializer);
    sse_encode_u_8(self.address, serializer);
    sse_encode_u_16(self.vendorId, serializer);
    sse_encode_u_16(self.productId, serializer);
    sse_encode_u_8(self.numConfigurations, serializer);
    sse_encode_u_8(self.maxPacketSize, serializer);
    sse_encode_u_8(self.protocolCode, serializer);
    sse_encode_u_8(self.subClassCode, serializer);
    sse_encode_u_8(self.classCode, serializer);
    sse_encode_opt_box_autoadd_u_8(self.serialNumberStringIndex, serializer);
    sse_encode_opt_box_autoadd_u_8(self.productStringIndex, serializer);
    sse_encode_opt_box_autoadd_u_8(self.manufacturerStringIndex, serializer);
    sse_encode_usb_version(self.usbVersion, serializer);
    sse_encode_usb_version(self.deviceVersion, serializer);
    sse_encode_u_8(self.descriptorType, serializer);
    sse_encode_u_8(self.length, serializer);
  }

  @protected
  void sse_encode_usb_version(UsbVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.field0, serializer);
    sse_encode_u_8(self.field1, serializer);
    sse_encode_u_8(self.field2, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
