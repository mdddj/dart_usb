// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/usb.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1027303645;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'dart_usb',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  void crateApiUsbUsbHandleClaimInterface(
      {required UsbHandle that, required int iface});

  Stream<Uint8List> crateApiUsbUsbHandleReadInterrupt(
      {required UsbHandle that,
      required int endpoint,
      required BigInt timeout});

  void crateApiUsbUsbHandleReleaseInterface(
      {required UsbHandle that, required int iface});

  void crateApiUsbUsbHandleSetActiveConfiguration(
      {required UsbHandle that, required int config});

  BigInt crateApiUsbUsbHandleWriteData(
      {required UsbHandle that,
      required int endpoint,
      required List<int> buf,
      required BigInt timeout});

  int crateApiUsbUsbInfoAutoAccessorGetAddress({required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetBusNumber({required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetClassCode({required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetDescriptorType({required UsbInfo that});

  UsbVersion crateApiUsbUsbInfoAutoAccessorGetDeviceVersion(
      {required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetLength({required UsbInfo that});

  int? crateApiUsbUsbInfoAutoAccessorGetManufacturerStringIndex(
      {required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetMaxPacketSize({required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetNumConfigurations(
      {required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetProductId({required UsbInfo that});

  int? crateApiUsbUsbInfoAutoAccessorGetProductStringIndex(
      {required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetProtocolCode({required UsbInfo that});

  int? crateApiUsbUsbInfoAutoAccessorGetSerialNumberStringIndex(
      {required UsbInfo that});

  UsbSpeed crateApiUsbUsbInfoAutoAccessorGetSpeed({required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetSubClassCode({required UsbInfo that});

  UsbVersion crateApiUsbUsbInfoAutoAccessorGetUsbVersion(
      {required UsbInfo that});

  int crateApiUsbUsbInfoAutoAccessorGetVendorId({required UsbInfo that});

  void crateApiUsbUsbInfoAutoAccessorSetAddress(
      {required UsbInfo that, required int address});

  void crateApiUsbUsbInfoAutoAccessorSetBusNumber(
      {required UsbInfo that, required int busNumber});

  void crateApiUsbUsbInfoAutoAccessorSetClassCode(
      {required UsbInfo that, required int classCode});

  void crateApiUsbUsbInfoAutoAccessorSetDescriptorType(
      {required UsbInfo that, required int descriptorType});

  void crateApiUsbUsbInfoAutoAccessorSetDeviceVersion(
      {required UsbInfo that, required UsbVersion deviceVersion});

  void crateApiUsbUsbInfoAutoAccessorSetLength(
      {required UsbInfo that, required int length});

  void crateApiUsbUsbInfoAutoAccessorSetManufacturerStringIndex(
      {required UsbInfo that, int? manufacturerStringIndex});

  void crateApiUsbUsbInfoAutoAccessorSetMaxPacketSize(
      {required UsbInfo that, required int maxPacketSize});

  void crateApiUsbUsbInfoAutoAccessorSetNumConfigurations(
      {required UsbInfo that, required int numConfigurations});

  void crateApiUsbUsbInfoAutoAccessorSetProductId(
      {required UsbInfo that, required int productId});

  void crateApiUsbUsbInfoAutoAccessorSetProductStringIndex(
      {required UsbInfo that, int? productStringIndex});

  void crateApiUsbUsbInfoAutoAccessorSetProtocolCode(
      {required UsbInfo that, required int protocolCode});

  void crateApiUsbUsbInfoAutoAccessorSetSerialNumberStringIndex(
      {required UsbInfo that, int? serialNumberStringIndex});

  void crateApiUsbUsbInfoAutoAccessorSetSpeed(
      {required UsbInfo that, required UsbSpeed speed});

  void crateApiUsbUsbInfoAutoAccessorSetSubClassCode(
      {required UsbInfo that, required int subClassCode});

  void crateApiUsbUsbInfoAutoAccessorSetUsbVersion(
      {required UsbInfo that, required UsbVersion usbVersion});

  void crateApiUsbUsbInfoAutoAccessorSetVendorId(
      {required UsbInfo that, required int vendorId});

  UsbHandle crateApiUsbUsbInfoOpen({required UsbInfo that});

  UsbName crateApiUsbUsbInfoReadUsbName({required UsbInfo that});

  List<UsbInfo> crateApiUsbGetUsbInfos();

  Stream<List<UsbInfo>> crateApiUsbListenUsbEventHandle({BigInt? sleep});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UsbHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UsbHandle;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UsbHandlePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_UsbInfo;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_UsbInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UsbInfoPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void crateApiUsbUsbHandleClaimInterface(
      {required UsbHandle that, required int iface}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
            that, serializer);
        sse_encode_u_8(iface, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbHandleClaimInterfaceConstMeta,
      argValues: [that, iface],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbHandleClaimInterfaceConstMeta =>
      const TaskConstMeta(
        debugName: "UsbHandle_claim_interface",
        argNames: ["that", "iface"],
      );

  @override
  Stream<Uint8List> crateApiUsbUsbHandleReadInterrupt(
      {required UsbHandle that,
      required int endpoint,
      required BigInt timeout}) {
    final listen = RustStreamSink<Uint8List>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
            that, serializer);
        sse_encode_u_8(endpoint, serializer);
        sse_encode_u_64(timeout, serializer);
        sse_encode_StreamSink_list_prim_u_8_strict_Sse(listen, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbHandleReadInterruptConstMeta,
      argValues: [that, endpoint, timeout, listen],
      apiImpl: this,
    ));
    return listen.stream;
  }

  TaskConstMeta get kCrateApiUsbUsbHandleReadInterruptConstMeta =>
      const TaskConstMeta(
        debugName: "UsbHandle_read_interrupt",
        argNames: ["that", "endpoint", "timeout", "listen"],
      );

  @override
  void crateApiUsbUsbHandleReleaseInterface(
      {required UsbHandle that, required int iface}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
            that, serializer);
        sse_encode_u_8(iface, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbHandleReleaseInterfaceConstMeta,
      argValues: [that, iface],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbHandleReleaseInterfaceConstMeta =>
      const TaskConstMeta(
        debugName: "UsbHandle_release_interface",
        argNames: ["that", "iface"],
      );

  @override
  void crateApiUsbUsbHandleSetActiveConfiguration(
      {required UsbHandle that, required int config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
            that, serializer);
        sse_encode_u_8(config, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbHandleSetActiveConfigurationConstMeta,
      argValues: [that, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbHandleSetActiveConfigurationConstMeta =>
      const TaskConstMeta(
        debugName: "UsbHandle_set_active_configuration",
        argNames: ["that", "config"],
      );

  @override
  BigInt crateApiUsbUsbHandleWriteData(
      {required UsbHandle that,
      required int endpoint,
      required List<int> buf,
      required BigInt timeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
            that, serializer);
        sse_encode_u_8(endpoint, serializer);
        sse_encode_list_prim_u_8_loose(buf, serializer);
        sse_encode_u_64(timeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiUsbUsbHandleWriteDataConstMeta,
      argValues: [that, endpoint, buf, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbHandleWriteDataConstMeta =>
      const TaskConstMeta(
        debugName: "UsbHandle_write_data",
        argNames: ["that", "endpoint", "buf", "timeout"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetAddress({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetAddressConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_address",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetBusNumber({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetBusNumberConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetBusNumberConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_bus_number",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetClassCode({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetClassCodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetClassCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_class_code",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetDescriptorType({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetDescriptorTypeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetDescriptorTypeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_descriptor_type",
        argNames: ["that"],
      );

  @override
  UsbVersion crateApiUsbUsbInfoAutoAccessorGetDeviceVersion(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usb_version,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetDeviceVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetDeviceVersionConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_device_version",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetLength({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetLengthConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetLengthConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_length",
        argNames: ["that"],
      );

  @override
  int? crateApiUsbUsbInfoAutoAccessorGetManufacturerStringIndex(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiUsbUsbInfoAutoAccessorGetManufacturerStringIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorGetManufacturerStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_get_manufacturer_string_index",
            argNames: ["that"],
          );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetMaxPacketSize({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetMaxPacketSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetMaxPacketSizeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_max_packet_size",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetNumConfigurations(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetNumConfigurationsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorGetNumConfigurationsConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_get_num_configurations",
            argNames: ["that"],
          );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetProductId({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetProductIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetProductIdConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_product_id",
        argNames: ["that"],
      );

  @override
  int? crateApiUsbUsbInfoAutoAccessorGetProductStringIndex(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetProductStringIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorGetProductStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_get_product_string_index",
            argNames: ["that"],
          );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetProtocolCode({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetProtocolCodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetProtocolCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_protocol_code",
        argNames: ["that"],
      );

  @override
  int? crateApiUsbUsbInfoAutoAccessorGetSerialNumberStringIndex(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiUsbUsbInfoAutoAccessorGetSerialNumberStringIndexConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorGetSerialNumberStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_get_serial_number_string_index",
            argNames: ["that"],
          );

  @override
  UsbSpeed crateApiUsbUsbInfoAutoAccessorGetSpeed({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usb_speed,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetSpeedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetSpeedConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_speed",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetSubClassCode({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetSubClassCodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetSubClassCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_sub_class_code",
        argNames: ["that"],
      );

  @override
  UsbVersion crateApiUsbUsbInfoAutoAccessorGetUsbVersion(
      {required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usb_version,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetUsbVersionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetUsbVersionConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_usb_version",
        argNames: ["that"],
      );

  @override
  int crateApiUsbUsbInfoAutoAccessorGetVendorId({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorGetVendorIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorGetVendorIdConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_get_vendor_id",
        argNames: ["that"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetAddress(
      {required UsbInfo that, required int address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(address, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetAddressConstMeta,
      argValues: [that, address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetAddressConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_address",
        argNames: ["that", "address"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetBusNumber(
      {required UsbInfo that, required int busNumber}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(busNumber, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetBusNumberConstMeta,
      argValues: [that, busNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetBusNumberConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_bus_number",
        argNames: ["that", "busNumber"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetClassCode(
      {required UsbInfo that, required int classCode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(classCode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetClassCodeConstMeta,
      argValues: [that, classCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetClassCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_class_code",
        argNames: ["that", "classCode"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetDescriptorType(
      {required UsbInfo that, required int descriptorType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(descriptorType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetDescriptorTypeConstMeta,
      argValues: [that, descriptorType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetDescriptorTypeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_descriptor_type",
        argNames: ["that", "descriptorType"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetDeviceVersion(
      {required UsbInfo that, required UsbVersion deviceVersion}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_usb_version(deviceVersion, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetDeviceVersionConstMeta,
      argValues: [that, deviceVersion],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetDeviceVersionConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_device_version",
        argNames: ["that", "deviceVersion"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetLength(
      {required UsbInfo that, required int length}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(length, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetLengthConstMeta,
      argValues: [that, length],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetLengthConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_length",
        argNames: ["that", "length"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetManufacturerStringIndex(
      {required UsbInfo that, int? manufacturerStringIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_opt_box_autoadd_u_8(manufacturerStringIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiUsbUsbInfoAutoAccessorSetManufacturerStringIndexConstMeta,
      argValues: [that, manufacturerStringIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorSetManufacturerStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_set_manufacturer_string_index",
            argNames: ["that", "manufacturerStringIndex"],
          );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetMaxPacketSize(
      {required UsbInfo that, required int maxPacketSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(maxPacketSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetMaxPacketSizeConstMeta,
      argValues: [that, maxPacketSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetMaxPacketSizeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_max_packet_size",
        argNames: ["that", "maxPacketSize"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetNumConfigurations(
      {required UsbInfo that, required int numConfigurations}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(numConfigurations, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetNumConfigurationsConstMeta,
      argValues: [that, numConfigurations],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorSetNumConfigurationsConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_set_num_configurations",
            argNames: ["that", "numConfigurations"],
          );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetProductId(
      {required UsbInfo that, required int productId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_16(productId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetProductIdConstMeta,
      argValues: [that, productId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetProductIdConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_product_id",
        argNames: ["that", "productId"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetProductStringIndex(
      {required UsbInfo that, int? productStringIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_opt_box_autoadd_u_8(productStringIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetProductStringIndexConstMeta,
      argValues: [that, productStringIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorSetProductStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_set_product_string_index",
            argNames: ["that", "productStringIndex"],
          );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetProtocolCode(
      {required UsbInfo that, required int protocolCode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(protocolCode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetProtocolCodeConstMeta,
      argValues: [that, protocolCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetProtocolCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_protocol_code",
        argNames: ["that", "protocolCode"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetSerialNumberStringIndex(
      {required UsbInfo that, int? serialNumberStringIndex}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_opt_box_autoadd_u_8(serialNumberStringIndex, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiUsbUsbInfoAutoAccessorSetSerialNumberStringIndexConstMeta,
      argValues: [that, serialNumberStringIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiUsbUsbInfoAutoAccessorSetSerialNumberStringIndexConstMeta =>
          const TaskConstMeta(
            debugName: "UsbInfo_auto_accessor_set_serial_number_string_index",
            argNames: ["that", "serialNumberStringIndex"],
          );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetSpeed(
      {required UsbInfo that, required UsbSpeed speed}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_usb_speed(speed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetSpeedConstMeta,
      argValues: [that, speed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetSpeedConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_speed",
        argNames: ["that", "speed"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetSubClassCode(
      {required UsbInfo that, required int subClassCode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_8(subClassCode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetSubClassCodeConstMeta,
      argValues: [that, subClassCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetSubClassCodeConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_sub_class_code",
        argNames: ["that", "subClassCode"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetUsbVersion(
      {required UsbInfo that, required UsbVersion usbVersion}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_usb_version(usbVersion, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetUsbVersionConstMeta,
      argValues: [that, usbVersion],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetUsbVersionConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_usb_version",
        argNames: ["that", "usbVersion"],
      );

  @override
  void crateApiUsbUsbInfoAutoAccessorSetVendorId(
      {required UsbInfo that, required int vendorId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        sse_encode_u_16(vendorId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbUsbInfoAutoAccessorSetVendorIdConstMeta,
      argValues: [that, vendorId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoAutoAccessorSetVendorIdConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_auto_accessor_set_vendor_id",
        argNames: ["that", "vendorId"],
      );

  @override
  UsbHandle crateApiUsbUsbInfoOpen({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiUsbUsbInfoOpenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoOpenConstMeta => const TaskConstMeta(
        debugName: "UsbInfo_open",
        argNames: ["that"],
      );

  @override
  UsbName crateApiUsbUsbInfoReadUsbName({required UsbInfo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usb_name,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiUsbUsbInfoReadUsbNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbUsbInfoReadUsbNameConstMeta =>
      const TaskConstMeta(
        debugName: "UsbInfo_read_usb_name",
        argNames: ["that"],
      );

  @override
  List<UsbInfo> crateApiUsbGetUsbInfos() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbGetUsbInfosConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUsbGetUsbInfosConstMeta => const TaskConstMeta(
        debugName: "get_usb_infos",
        argNames: [],
      );

  @override
  Stream<List<UsbInfo>> crateApiUsbListenUsbEventHandle({BigInt? sleep}) {
    final listen = RustStreamSink<List<UsbInfo>>();
    handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo_Sse(
            listen, serializer);
        sse_encode_opt_box_autoadd_u_64(sleep, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUsbListenUsbEventHandleConstMeta,
      argValues: [listen, sleep],
      apiImpl: this,
    ));
    return listen.stream;
  }

  TaskConstMeta get kCrateApiUsbListenUsbEventHandleConstMeta =>
      const TaskConstMeta(
        debugName: "listen_usb_event_handle",
        argNames: ["listen", "sleep"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UsbHandle => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UsbHandle => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UsbInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UsbInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  UsbHandle
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbInfo
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbHandle
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbInfo
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbHandle
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbHandleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UsbInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<List<UsbInfo>>
      dco_decode_StreamSink_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo_Sse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Uint8List> dco_decode_StreamSink_list_prim_u_8_strict_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<UsbInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UsbName dco_decode_usb_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UsbName(
      manufacturerName: dco_decode_opt_String(arr[0]),
      productName: dco_decode_opt_String(arr[1]),
      serialNumber: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  UsbSpeed dco_decode_usb_speed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UsbSpeed.values[raw as int];
  }

  @protected
  UsbVersion dco_decode_usb_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UsbVersion(
      field0: dco_decode_u_8(arr[0]),
      field1: dco_decode_u_8(arr[1]),
      field2: dco_decode_u_8(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  UsbHandle
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbInfo
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbHandle
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbInfo
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbHandle
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbHandleImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UsbInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UsbInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<List<UsbInfo>>
      sse_decode_StreamSink_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Uint8List> sse_decode_StreamSink_list_prim_u_8_strict_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<UsbInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UsbInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UsbName sse_decode_usb_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_manufacturerName = sse_decode_opt_String(deserializer);
    var var_productName = sse_decode_opt_String(deserializer);
    var var_serialNumber = sse_decode_opt_String(deserializer);
    return UsbName(
        manufacturerName: var_manufacturerName,
        productName: var_productName,
        serialNumber: var_serialNumber);
  }

  @protected
  UsbSpeed sse_decode_usb_speed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return UsbSpeed.values[inner];
  }

  @protected
  UsbVersion sse_decode_usb_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_8(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    var var_field2 = sse_decode_u_8(deserializer);
    return UsbVersion(
        field0: var_field0, field1: var_field1, field2: var_field2);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          UsbHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbHandleImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          UsbInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbInfoImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          UsbInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbInfoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          UsbHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbHandleImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          UsbInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbInfoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbHandle(
          UsbHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbHandleImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          UsbInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UsbInfoImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_StreamSink_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo_Sse(
          RustStreamSink<List<UsbInfo>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_prim_u_8_strict_Sse(
      RustStreamSink<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          List<UsbInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUsbInfo(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usb_name(UsbName self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.manufacturerName, serializer);
    sse_encode_opt_String(self.productName, serializer);
    sse_encode_opt_String(self.serialNumber, serializer);
  }

  @protected
  void sse_encode_usb_speed(UsbSpeed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_usb_version(UsbVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self.field0, serializer);
    sse_encode_u_8(self.field1, serializer);
    sse_encode_u_8(self.field2, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class UsbHandleImpl extends RustOpaque implements UsbHandle {
  // Not to be used by end users
  UsbHandleImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UsbHandleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UsbHandle,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UsbHandle,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UsbHandlePtr,
  );

  ///声明接口 (通常是0)
  void claimInterface({required int iface}) => RustLib.instance.api
      .crateApiUsbUsbHandleClaimInterface(that: this, iface: iface);

  ///读取数据
  Stream<Uint8List> readInterrupt(
          {required int endpoint, required BigInt timeout}) =>
      RustLib.instance.api.crateApiUsbUsbHandleReadInterrupt(
          that: this, endpoint: endpoint, timeout: timeout);

  ///释放接口
  void releaseInterface({required int iface}) => RustLib.instance.api
      .crateApiUsbUsbHandleReleaseInterface(that: this, iface: iface);

  ///设置设备配置(通常1)
  void setActiveConfiguration({required int config}) => RustLib.instance.api
      .crateApiUsbUsbHandleSetActiveConfiguration(that: this, config: config);

  ///写数据
  BigInt writeData(
          {required int endpoint,
          required List<int> buf,
          required BigInt timeout}) =>
      RustLib.instance.api.crateApiUsbUsbHandleWriteData(
          that: this, endpoint: endpoint, buf: buf, timeout: timeout);
}

@sealed
class UsbInfoImpl extends RustOpaque implements UsbInfo {
  // Not to be used by end users
  UsbInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UsbInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UsbInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UsbInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UsbInfoPtr,
  );

  int get address =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetAddress(
        that: this,
      );

  int get busNumber =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetBusNumber(
        that: this,
      );

  int get classCode =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetClassCode(
        that: this,
      );

  int get descriptorType =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetDescriptorType(
        that: this,
      );

  UsbVersion get deviceVersion =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetDeviceVersion(
        that: this,
      );

  int get length =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetLength(
        that: this,
      );

  int? get manufacturerStringIndex => RustLib.instance.api
          .crateApiUsbUsbInfoAutoAccessorGetManufacturerStringIndex(
        that: this,
      );

  int get maxPacketSize =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetMaxPacketSize(
        that: this,
      );

  int get numConfigurations =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetNumConfigurations(
        that: this,
      );

  int get productId =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetProductId(
        that: this,
      );

  int? get productStringIndex =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetProductStringIndex(
        that: this,
      );

  int get protocolCode =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetProtocolCode(
        that: this,
      );

  int? get serialNumberStringIndex => RustLib.instance.api
          .crateApiUsbUsbInfoAutoAccessorGetSerialNumberStringIndex(
        that: this,
      );

  UsbSpeed get speed =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetSpeed(
        that: this,
      );

  int get subClassCode =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetSubClassCode(
        that: this,
      );

  UsbVersion get usbVersion =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetUsbVersion(
        that: this,
      );

  int get vendorId =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorGetVendorId(
        that: this,
      );

  set address(int address) => RustLib.instance.api
      .crateApiUsbUsbInfoAutoAccessorSetAddress(that: this, address: address);

  set busNumber(int busNumber) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetBusNumber(
          that: this, busNumber: busNumber);

  set classCode(int classCode) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetClassCode(
          that: this, classCode: classCode);

  set descriptorType(int descriptorType) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetDescriptorType(
          that: this, descriptorType: descriptorType);

  set deviceVersion(UsbVersion deviceVersion) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetDeviceVersion(
          that: this, deviceVersion: deviceVersion);

  set length(int length) => RustLib.instance.api
      .crateApiUsbUsbInfoAutoAccessorSetLength(that: this, length: length);

  set manufacturerStringIndex(int? manufacturerStringIndex) =>
      RustLib.instance.api
          .crateApiUsbUsbInfoAutoAccessorSetManufacturerStringIndex(
              that: this, manufacturerStringIndex: manufacturerStringIndex);

  set maxPacketSize(int maxPacketSize) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetMaxPacketSize(
          that: this, maxPacketSize: maxPacketSize);

  set numConfigurations(int numConfigurations) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetNumConfigurations(
          that: this, numConfigurations: numConfigurations);

  set productId(int productId) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetProductId(
          that: this, productId: productId);

  set productStringIndex(int? productStringIndex) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetProductStringIndex(
          that: this, productStringIndex: productStringIndex);

  set protocolCode(int protocolCode) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetProtocolCode(
          that: this, protocolCode: protocolCode);

  set serialNumberStringIndex(int? serialNumberStringIndex) =>
      RustLib.instance.api
          .crateApiUsbUsbInfoAutoAccessorSetSerialNumberStringIndex(
              that: this, serialNumberStringIndex: serialNumberStringIndex);

  set speed(UsbSpeed speed) => RustLib.instance.api
      .crateApiUsbUsbInfoAutoAccessorSetSpeed(that: this, speed: speed);

  set subClassCode(int subClassCode) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetSubClassCode(
          that: this, subClassCode: subClassCode);

  set usbVersion(UsbVersion usbVersion) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetUsbVersion(
          that: this, usbVersion: usbVersion);

  set vendorId(int vendorId) =>
      RustLib.instance.api.crateApiUsbUsbInfoAutoAccessorSetVendorId(
          that: this, vendorId: vendorId);

  UsbHandle open() => RustLib.instance.api.crateApiUsbUsbInfoOpen(
        that: this,
      );

  UsbName readUsbName() => RustLib.instance.api.crateApiUsbUsbInfoReadUsbName(
        that: this,
      );
}
